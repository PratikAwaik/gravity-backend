// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(uuid())
  username             String         @unique @db.VarChar(256)
  prefixedName         String         @unique @map("prefixed_name") @db.VarChar(256)
  email                String         @unique
  password             String
  profilePic           String?        @map("profile_pic")
  moderatedCommunities Community[]    @relation("moderated_communities")
  joinedCommunities    Community[]    @relation("joined_communities")
  posts                Post[]
  comments             Comment[]
  createdAt            DateTime       @default(now()) @map("created_at")
  updatedAt            DateTime       @updatedAt @map("updated_at")
  PostScore            PostScore[]
  CommentScore         CommentScore[]

  @@map("users")
}

model Community {
  id           String   @id @default(uuid())
  name         String   @unique @db.VarChar(256)
  prefixedName String   @unique @map("prefixed_name") @db.VarChar(256)
  description  String
  icon         String?
  adminId      String   @map("admin_id")
  user         User     @relation("moderated_communities", fields: [adminId], references: [id])
  posts        Post[]
  members      User[]   @relation("joined_communities")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("communities")
}

enum PostType {
  TEXT
  MEDIA
  ARTICLE
}

model Post {
  id            String      @id @default(uuid())
  title         String      @db.VarChar(300)
  content       String
  authorId      String      @map("author_id")
  author        User        @relation(fields: [authorId], references: [id])
  communityId   String      @map("community_id")
  community     Community   @relation(fields: [communityId], references: [id])
  type          PostType
  comments      Comment[]
  deleted       Boolean     @default(false)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  postScores    PostScore[]
  commentsCount Int         @default(0) @map("comments_count")
  score         Int         @default(0)

  @@map("posts")
}

model Comment {
  id            String         @id @default(uuid())
  content       String
  authorId      String         @map("author_id")
  author        User           @relation(fields: [authorId], references: [id])
  postId        String         @map("post_id")
  post          Post           @relation(fields: [postId], references: [id])
  parentId      String?        @map("parent_id")
  parent        Comment?       @relation("parent_children", fields: [parentId], references: [id])
  children      Comment[]      @relation("parent_children")
  deleted       Boolean        @default(false)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  commentScores CommentScore[]
  score         Int            @default(0)

  @@map("comments")
}

enum Direction {
  UPVOTE
  UNVOTE
  DOWNVOTE
}

model PostScore {
  id        String    @id @default(uuid())
  postId    String    @map("post_id")
  post      Post      @relation(fields: [postId], references: [id])
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id])
  direction Direction @default(UNVOTE)

  @@map("post_scores")
}

model CommentScore {
  id        String    @id @default(uuid())
  commentId String    @map("comment_id")
  comment   Comment   @relation(fields: [commentId], references: [id])
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id])
  direction Direction @default(UNVOTE)

  @@map("comment_scores")
}
